package com.example.layout.assig14_2;
//Package objects contain version information about the implementation and specification of a Java package
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.Environment;
import android.support.v4.content.res.ResourcesCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;


public class MainActivity extends AppCompatActivity {
    //here i have created main class
//public keyword is used in the declaration of a class,method or field;public classes,method and fields can be accessed by the members of any class.
//extends is for extending a class. implements is for implementing an interface
//AppCompatActivity is a class from e v7 appcompat library. This is a compatibility library that back ports some features of recent versions of
// Android to older devices.
//ImageView:Displays image resources, for example Bitmap or Drawable resources. ImageView is also commonly used to apply tints to an image and handle image scaling.
    //a bitmap is a mapping from some domain to bits. It is also called a bit array or bitmap index
//Button:A user interface element the user can tap or click to perform an action.
    ImageView imageview;
    Button button;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        //Variables, methods, and constructors, which are declared protected in a superclass can be accessed only by the subclasses
        // in other package or any class within the package of the protected members class.
        //void is a Java keyword.  Used at method declaration and definition to specify that the method does not return any type,
        // the method returns void.
        //onCreate Called when the activity is first created. This is where you should do all of your normal static set up: create views,
        // bind data to lists, etc. This method also provides you with a Bundle containing the activity's previously frozen state,
        // if there was one.Always followed by onStart().
        //Bundle is most often used for passing data through various Activities.
// This callback is called only when there is a saved instance previously saved using onSaveInstanceState().
// We restore some state in onCreate() while we can optionally restore other state here, possibly usable after onStart() has
// completed.The savedInstanceState Bundle is same as the one used in onCreate().

        super.onCreate(savedInstanceState);
// call the super class onCreate to complete the creation of activity like the view hierarchy
        setContentView(R.layout.activity_main);
        //R means Resource
        //layout means design
        //  main is the xml you have created under res->layout->main.xml
        //  Whenever you want to change your current Look of an Activity or when you move from one Activity to another .
        // The other Activity must have a design to show . So we call this method in onCreate and this is the second statement to set
        // the design
        imageview=(ImageView)findViewById(R.id.imageView);
        button=(Button)findViewById(R.id.button);
//findViewById:A user interface element that displays text to the user.
        //Java ByteArrayOutputStream class is used to write common data into multiple files.
        final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //ResourcesCompat.getDrawable:
                // Return a drawable object associated with a particular resource ID and styled for the specified theme.
                //res	Resources
                //id	int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier.
                //theme	Resources.Theme: The theme used to style the drawable attributes, may be null.
                Drawable drawable= ResourcesCompat.getDrawable(getResources(),R.drawable.image,null);
                Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();
                //a bitmap is a mapping from some domain to bits. It is also called a bit array or bitmap index.
                //BitmapDrawable:A Drawable that wraps a bitmap and can be tiled, stretched, or aligned.
                //get the bitmap value
                bitmap.compress(Bitmap.CompressFormat.PNG,50,byteArrayOutputStream);
                // finding SD Card path
                //bitmap.compress:Specifies the known formats a bitmap can be compressed into
                File filepath=new File(Environment.getExternalStorageDirectory()+"/Image File/");
                // try & catch block
                //here we will give path where we need to save the file
                try {
                    Log.e("path", "path= "+ new File( Environment.getExternalStorageDirectory()
                            + "/SampleImage.png").getCanonicalPath());
                    //getCanonicalPath() method returns the canonical pathname string of this abstract pathname. This method removes
                    // redundant names such as "." and ".." from the pathname
                    //log.e: Show issues that have caused errors, as well as the message level lower in this list.
                } catch (IOException e) {
                    e.printStackTrace();
                    //Prints this throwable and its backtrace to the specified print stream.
                }
                try {
                    //creation of new new file
                    //Java FileOutputStream is an output stream used for writing data to a file.
                    filepath.createNewFile();
                    //creating object of fileoutputstream
                    FileOutputStream fileOutputStream=new FileOutputStream(filepath);
                    //converting the data into byte
                    fileOutputStream.write(byteArrayOutputStream.toByteArray());
                    //closing the file
                    fileOutputStream.close();//closes the class

                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                // toast:A toast provides simple feedback about an operation in a small popup
                //Make a standard toast that just contains a text view with the text from a resource.

               // Parameters
                //context	Context: The context to use. Usually your Application or Activity object.
                //resId	int: The resource id of the string resource to use. Can be formatted text.
                //duration	int: How long to display the message. Either LENGTH_SHORT or LENGTH_LONG
//show(): it show the toast
                Toast.makeText(MainActivity.this, "Image Saved Successfully", Toast.LENGTH_LONG).show();


            }
        });


    }
}
